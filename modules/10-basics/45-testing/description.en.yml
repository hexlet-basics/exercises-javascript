---

name: How do we verify your solutions?
theory: |

  Our website verifies your solutions automatically. You may wonder how it works.

  In the simplest case, the system runs your code and analyzes the screen output. Then it compares the actual output against the expected output.

  The following lessons deal with more complex matters. You will be writing functions: a kind of mini-programs that receive some data from outside and perform operations on it. Verifying solutions gets a little more complicated in that case. The system runs your code sending some data to it. The system knows what result a correctly written function would receive with that particular data and "expects" it.

  Let's assume your task is to program a function that adds two numbers. The verification system will give it several combinations of numbers and compare your function's answers with correctly calculated ones. If all actual values match the expected ones, your solution would be considered valid.

  This approach is named testing. It is used extensively in the real-life day-to-day development process. A developer usually writes tests _first_, and only after that proceeds to write the program itself. During that process he/she runs tests multiple times to check how close he/she got to the desired solution.

  That is why our website says “Tests passed” once you solved the task correctly.

  One of your tasks in the following lessons will be to write a function that performs certain calculations and returns the result. As an example, let's assume you made a small mistake and the function returned the wrong value. In that case, the system will give you the following message:

  <pre class='hexlet-basics-output'>
    ● test

    expect(received).toBe(expected) // Object.is equality

    Expected value to be:
      "Hello, World!"
    Received:
      "ello, World!"
  </pre>

  In addition to our tests, it's very useful to experiment with code in the console [of a browser](https://developer.mozilla.org/en-US/docs/Tools/Browser_Console). When something isn't clear to you or you want to experiment with code, feel free to do all of this in the console. Ideally, it's best to execute all the code given in the lessons on your own. In addition to the console, you can use the following service [repl.it](https://repl.it/languages/javascript).
  
  Sometimes in the process of decision-making, it may seem that you have done everything correctly, but the system acts grumpy and does not accept a decision. Such cases are almost impossible. Failed tests simply can not get to the site, they are automatically run after each alteration. In the vast majority (all our projects have combined millions of runs over many years) the error is in the solution code. It can be very imperceptible, instead of the English letter, you accidentally entered a Russian one, instead of the upper case, you used a lower case or forgot to put a comma. Other cases are more complicated. Maybe your solution works for one set of inputs, but not for another. So always read the instructions and test output carefully. There is certainly an indication of an error.
  
  However, if you are sure about a mistake or have found some inaccuracy, you can always point it out. At the end of each theory, there is a link to the contents of the lesson on Github (this project is completely open-source!). You can write an issue, look through the tests (you can see how your code is called there), and even send a pull request. If it’s over your head, then join the #hexlet-feedback channel in Slack where we can always help you.

instructions: |
  Display the following number: `9780262531962`.
  Experiment with the output. Try another number or string there. Look at the system’s output.

definitions:
  - name: Tests
    description: |
      code designed to check if a program works correctly; it does so by comparing a set of known valid results against the actual output of the program.
tips:
  - |
    [TDD](https://en.wikipedia.org/wiki/Test-driven_development)
    [Hexlet Community in Slack]
