---

name: Creating (defining) functions
theory: |

  Defining your own functions makes it much easier to write and maintain programs. Functions allow you to combine complex (composite) operations in one. For example, sending an email on a website is a complex process that involves interaction with external systems (the Internet). Due to the ability to define functions, all the complexity can be hidden behind a simple function:

  ```javascript
  // A hypothetical example
  // A place where the function is taken from
  import { send } from 'mailer';

  const email = 'support@hexlet.io';
  const title = 'Help';
  const body = "I've written a success story, how can I get a discount?";

  // One little call and loads of logic inside
  send(email, title, body);
  ```

  A call like this contains a lot of logic. It connects to the mail server, generates a valid request based on the message header and body, then sends it and closes the connection.

  Let's create our first function. Its job is to print out a greeting:

  <pre class='hexlet-basics-output'>Hello, Hexlet!</pre>

  ```javascript
  // Function definition
  // The definition doesn't call or execute a function
  // We just declare this function exists now
  const showGreeting = () => {
    // Use 2-space indents inside the function body for readability 
    const text = 'Hello, Hexlet!';
    console.log(text);
  }

  // Calling a function
  showGreeting(); // => "Hello, Hexlet!"
  ```

  Unlike usual data, functions perform actions, so their names almost always have to be verbs: "build something", "draw something", "open something".

  Anything described inside the curly brackets `{}` is called a function body. There can be any code. Consider it a small independent program, a set of arbitrary statements. The body is executed exactly on function call. And each function call executes the body independently of other calls. By the way, the body can be empty:

  ```javascript
  // Minimal function definition
  const noop = () => {
  // There could be a code
  }

  noop();
  ```

  The function definition looks like creating a constant. Indeed, a function definition consists of two parts: the definition and the assignment to the constant:

  1. Definition: `() => { }`
  2. Assignment: `const nameOfFunction = ...`

  It is technically possible to create a function that is defined without a name and unavailable to call:

  ```javascript
  () => {
    // Valid but useless code
  };
  ```

  The notion of "creating a function" has many synonyms: "implement", "define". All of them are encountered in everyday practice.

instructions: |

  Implement the `printMotto()` function, which prints the phrase *Winter is coming*.

  ```javascript
  printMotto(); // => "Winter is coming"
  ```

  In tasks where you have to implement a function, you don't need to call it. Automated tests will call this function to check if it works. The example call above is shown just to give you an idea of how your function will be used.

tips: []
