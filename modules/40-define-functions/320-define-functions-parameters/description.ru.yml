---

name: Параметры функций
theory: |

  Функции могут не только возвращать значения, но и принимать их в виде параметров. С параметрами функций мы уже сталкивались много раз:

  ```javascript
  // Принимает на вход параметр любого типа
  console.log('я параметр');
  // Принимает на вход два строковых параметра
  // первый - что ищем, второй - на что меняем
  'google'.replace('go', 'mo'); // 'moogle'
  // Принимает на вход два числовых параметра
  // первый - начальный индекс (включая), второй - конечный индекс (не включая)
  'hexlet'.slice(1, 3); // 'ex'
  ```

  В этом уроке, мы научимся создавать функции, которые принимают на вход параметры. Представим, что перед нами стоит задача – реализовать функцию `getLastChar()`, возвращающую последний символ в строке, переданной ему на вход как параметр. Вот как будет выглядеть использование этой функции:

  ```javascript
  // Передача параметров напрямую без переменных
  getLastChar('Hexlet'); // 't'
  // Передача параметров через переменные
  const name1 = 'Hexlet';
  getLastChar(name1); // 't'
  const name2 = 'Goo';
  getLastChar(name2); // 'o'
  ```

  Из описания и примеров кода мы можем сделать следующие выводы:

  * Нам нужно определить функцию `getLastChar()`
  * Функция должна принимать на вход один параметр строкового типа
  * Функция должна возвращать значение строкового типа

  Определение функции:

  ```javascript
  const getLastChar = (str) => {
    // Вычисляем индекс последнего символа как длина строки - 1
    return str[str.length - 1];
  }
  ```

  Разберем его. В скобках указывается имя параметра (`str`). Так как внутри функции мы не знаем, с каким конкретно значением идет работа, то параметры всегда описываются как переменные. Имя параметра может быть любым, оно не связано с тем, как вызывается функция. Главное, чтобы это имя отражало смысл того значения, которое содержится внутри. Конкретное значение параметра будет зависеть от вызова этой функции.

  Точно таким же образом можно указывать два, три и более параметров. Каждый параметр отделяется от другого запятой.

  ```javascript
  // функция по нахождению среднего числа
  const average = (a, b) => {
    return (a + b) / 2;
  }

  average(1, 5); // 3
  average(1, 2); // 1.5
  ```

instructions: |

  Реализуйте функцию `truncate()`, которая обрезает переданный текст до указанного количества символов, добавляет в конце троеточие и возвращает получившуюся строку. Подобная логика часто используется на сайтах, чтобы отобразить длинный текст в сокращенном виде. Функция принимает два параметра:

  1. Строка, которую нужно обрезать
  2. Число символов, которые нужно оставить

  ```javascript
  // Передаём текст напрямую
  // Обрезаем текст, оставляя 2 символа
  truncate('hexlet', 2); // "he..."

  // Через переменную
  const text = 'it works!';
  // Обрезаем текст, оставляя 4 символа
  const result = truncate(text, 4);
  console.log(result); // => 'it w...'
  ```

  Реализовать эту функцию можно различными способами, подскажем лишь один из них. Для решения этим способом вам понадобится взять подстроку из строки, переданной первым параметром в функцию. Используйте для этого метод [slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice). Подумайте, исходя из задания, с какого индекса и по какой вам надо извлечь подстроку?

    ```javascript
    'welcome'.slice(2, 5); // "lco"
    ```

  С точки зрения проверочной системы не имеет значения, каким из способов будет реализована функция `truncate()` внутри, главное – чтобы она выполняла поставленную задачу

# tips:
#   - |
#     Чтобы указать в аргументах метода printSeq() целое число, используйте тип данных `int`.

