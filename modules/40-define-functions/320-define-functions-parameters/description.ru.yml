---

name: Параметры функций
theory: |

  Для добавления параметров в собственные функции, достаточно указать их в скобках при определении функции. Ниже пример определения функции, которая возвращает последний символ в строке:

  ```javascript
  // str - параметр
  const getLastChar = (str) => {
    // Вычисляем индекс последнего символа
    // извлекаем и возвращаем наружу
    return str[str.length - 1];
  };

  getLastChar('Hexlet'); // "t"
  getLastChar('Goo'); // "o"
  ```

  У функции `getLastChar()` ровно один параметр - переменная `str`. При вызове функции, туда подставляется конкретное значение. Для каждого вызова свое собственное. А вот такой код не сработает:

  ```javascript
  const getLastChar = ('some string') => {
  ```

  Конкретное значение не может указываться как параметр, смысл параметра в том, что значение становится известно только во время конкретного вызова, поэтому в определении должны быть имена переменных.

  Можно указывать два, три и более параметров. Ниже пример функции, которая находит среднее между двумя числами:

  ```javascript
  const average = (x, y) => {
    return (x + y) / 2;
  };

  average(1, 5); // 3
  average(1, 2); // 1.5
  ```

  Порядок определения параметров и передачи их в функцию должны совпадать, поэтому внимательно следите за тем, что написано в документации. В редких случая, как выше порядок не важен, но для большинства функций имеет критическое значение:

  ```javascript
  // Округление. Первый параметр - число, второй - точность
  round(10.32, 1); // 10.3
  // Такой вызов вообще не имеет смысла, хотя и работает
  round(1, 10.32); // 1
  ```

  Если передать больше параметров чем определено, то JavaScript проигнорирует лишнее. Если наоборот, то значением не переданных параметров станет `undefined`.

  ```javascript
  average(10, 10, 10); // 10
  // (10 + undefined) / 2
  average(10); // NaN
  ```

  Практического смысла в таком коде нет, но по ошибке его можно написать. Поэтому хорошо бы знать о таком поведении, чтобы увидеть ошибку и исправить ее.

  Параметры в JavaScript часто называют аргументами. В программировании вы будете встречать эти слова часто как синонимы. Но между ними все же есть небольшая разница. Строго говоря, параметры задаются при определении функции в скобках, а аргументы, это то-что передается в функцию при ее вызове.

instructions: |

  Реализуйте функцию `truncate()`, которая обрезает переданный текст и добавляет в конце троеточие. Подобная логика часто используется на сайтах, чтобы отобразить длинный текст в сокращенном виде. Параметры функции:

  1. Строка, которую нужно обрезать
  2. Число символов, которые нужно оставить

  ```javascript
  truncate('hexlet', 2); // "he..."

  const text = 'it works!';
  const result = truncate(text, 4);
  console.log(result); // => 'it w...'
  ```

  В этой задаче вам нужно взять подстроку из строки, переданной первым параметром. Для этого вам понадобится метод [slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice). Подумайте исходя из задания, с какого индекса и по какой вам надо извлечь подстроку?


    ```javascript
    'welcome'.slice(2, 5); // "lco"
    ```

# tips:
#   - |
#     Чтобы указать в аргументах метода printSeq() целое число, используйте тип данных `int`.

