---

name: Передача одного аргумента
theory: |

  Параметром (формальным параметром) функции называется переменная в функции, которая будет содержать передаваемое снаружи входное значение. Аргументом называют фактическую переменную или выражение, значение которого используется как входное значение при вызове функции. Функции без параметров встречаются редко. Чаще функции принимают на вход данные, как-то их используют и выдают результат обратно. В этом уроке мы познакомимся с определением функций, принимающих на вход один аргумент. Посмотрите на определение ниже:

  ```javascript
  const showCurrentDay = (text) => {
    console.log(`Today is: ${text}`);
  };

  showCurrentDay('January 29');
  ```

  <pre class='hexlet-basics-output'>Today is: January 29</pre>

  Теперь понятно, зачем нужны были круглые скобки после имени функции: в них *можно* указать параметры. Технически, параметры функции всегда являются переменными, а не константами. Но лучше относиться к ним как к константам.

  Заметьте: мы не определяем переменную `text`, но используем её в теле функции. JavaScript работает так: переменная сама создаётся при вызове, и указанное значение (в нашем примере — `'January 29'`) записывается в эту переменную.

  Параметры можно называть как угодно, их имена имеют смысл исключительно в теле функции. Например, если изменить имя параметра так:

  ```javascript
  const showCurrentDate = (lala) => {
    console.log(`Today is: ${lala}`);
  };

  const date = 'January 29';
  showCurrentDate(date);
  ```

  то поведение функции не изменится. Это касается как параметров (`lala`), так и аргументов (`date`).

  Новички иногда пытаются сделать примерно такое определение функции:

  ```javascript
  const showCurrentDate = ('Today is: December 5') => {
    // какой-нибудь код
  };
  ```

  Запустить такой код не получится — он содержит синтаксическую ошибку. Вместо переменной в параметре написана строка, то есть значение.

  *Параметр должен быть переменной*, иначе он не сможет быть параметром, то есть чем-то, что *принимает значение при вызове*.

  Если же вам нужна какая-то информация в функции, и вы заранее знаете какая именно, то параметр для этого не нужен, ведь мы уже умеем сохранять значения для последующего использования —  достаточно создать константу в самом теле:

  ```javascript
  const showCurrentDate = () => {
    const text = 'Today is: December 5';
    // какой-нибудь код
  };
  ```

instructions: |

  Реализуйте функцию `printJaimesLine()`, которая принимает один аргумент — строку, и выводит реплику на экран в формате `JAIME: переданная_строка`.

  Как назвать переменную, которая будет параметром — решайте сами.

  Наша система содержит код, скрытый от вас. В этом упражнении скрыт вызов функции `printJaimesLine()`. Так мы проверяем ваше решение.

  Вам не нужно самостоятельно вызывать функцию, только *определить её*. Но для наглядности — вот как наша система вызывает её:

  ```javascript
  printJaimesLine('Farewell, my friend...');
  ```

  <pre class='hexlet-basics-output'>JAIME:  Farewell, my friend...</pre>

tips: []
