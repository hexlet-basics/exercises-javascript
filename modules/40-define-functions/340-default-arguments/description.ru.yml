---

name: Параметры по умолчанию
theory: |

  Напомню, что аргумент может быть **необязательным**. У такого аргумента есть **значение по умолчанию**.

  Например, функция `getParentFor`, которую вы использовали в некоторых упражнениях, принимает имя ребёнка первым аргументом, а вторым — строку `mother` или `father`. Второй аргумент — необязательный, и если не указывать его, то автоматически по умолчанию будет использоваться `mother`.

  Эти два вызова равнозначны:

  ```javascript
  getParentFor('Jon Snow');
  getParentFor('Jon Snow', 'mother');
  ```

  Каким образом там сделаны аргументы по умолчанию? Давайте заглянем в определение этой функции:

  ```javascript
  const getParentFor = (child, parent = 'mother') => {
    // какой-то код
  }
  ```

  Первый аргумент указан привычно — просто название переменной. Это делает аргумент *обязательным*.

  Второй аргумент указан со значением в формате `аргумент = какое_то_значение`. Точно так же, как при создании переменной. Этот фрагмент `= какое_то_значение` делает аргумент *необязательным*, и задаёт ему *значение по умолчанию*.

  Аргументов по умолчанию может быть любое количество, но все они должны быть в конце списка аргументов. То есть такие строчки кода синтаксически некорректны:

  - `const getParentFor = (childName = 'Jon', who) {`
  - `const getParentFor = calculate(a, b = 90, c) {`
  - `const getParentFor = getPrices(code = 4161, quantity, place) {`

instructions: |

  Реализуйте функцию `getCustomParentFor`, которая принимает два аргумента:

  1. Строку — имя ребёнка.
  2. Строку с указанием родителя. Этот аргумент должен по умолчанию быть `'father'`.

  Функция должна возвращать имя соответствующего родителя.

  Пример вызова:

  ```javascript
  getCustomParentFor('Cersei Lannister');
  ```

  Такой вызов вернёт имя отца.

  - Используйте готовую функцию `getParentFor` внутри своей функции.
  - Не нужно вызывать свою функцию `getCustomParentFor`, только определить её.
