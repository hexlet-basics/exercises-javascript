---

name: Именование
theory: |

  Стиль именования функций в JavaScript такой же, как и стиль именования переменных: _lowerCamelCase_. Но при выборе самих слов есть важное отличие.

  **Функция — действие**, вызов функции всегда подобен указанию «сходи», «возьми», «напечатай», «положи» и так далее. Вспомните, какие функции были в предыдущих уроках:

  - `showDate` («показать дату»)
  - `sub` (subtract — «вычесть»)
  - `round` («округлить»)
  - `getMoney` («получить»)

  **Переменная/Константа — сущность**, поэтому мы используем существительные:

  - `child`
  - `result`
  - `euros`

  Берите на вооружение следующую структуру: функция — глагол, переменная/константа — существительное.

  В уроке про переменные мы просили вас придумать название переменной и записать в блокноте или отправить себе на почту. Найдите это название и посмотрите на него свежим взглядом: оно понятное? Описывает суть однозначно или требует вникания?

  Жизнь программиста наполнена такими моментами: открыть старый код и попытаться понять его. Будьте добры к будущему себе и к коллегам, давайте переменным, константам и функциям понятные названия.

instructions: |

  Реализуйте функцию, которая принимает на вход номер кредитки (состоящей из 16 цифр) и возвращает его скрытую версию, которая может использоваться на сайте для отображения. Если исходная карта имела номер _2034399002125581_,  то скрытая версия выглядит так _\*\*\*\*5581_. Другими словами, функция заменяет первые 12 символов, на четыре звездочки. Количество звездочек регулируется вторым необязательным параметром. Значение по умолчанию - 4

  ```javascript
  const hiddenCardNumber = getHiddenCard(2034399002125581);
  console.log(hiddenCardNumber); // => ****5581

  const hiddenCardNumber = getHiddenCard(2034399002125581, 2);
  console.log(hiddenCardNumber); // => **5581
  ```

  <pre class='hexlet-basics-output'>
  ****5581
  </pre>

  Полезные методы:

  * [String.prototype.slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) – извлекает часть строки или как говорят "подстроку". Первым параметром принимает индекс элемента, с которого надо начинать извлечение, вторым – индекс элемента, до которого извлекаются символы. По умолчанию, извлекается все до конца строки.

      ```javascript
      // с третьего индекса до конца строки
      'java script'.slice(3); // 'a script'

      // с первого индекса по четвертый
      'java script'.slice(1, 4); // 'ava'

      // можно использовать отрицательные индексы
      // тогда отсчет берется с конца строки
      'java script'.slice(-2); // 'pt'
      ```

  * [String.prototype.padStart](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart) – Дополняет строку "заполнителем" слева, до тех пор пока длина строки не станет равной указанной. Первым параметром функция принимает желаемую длинну строки, вторым – заполнитель.

      ```javascript
      '5'.padStart(2, '*'); // '*5'
      '10'.padStart(4, '+'); // '++10'
      ```

  Примеры:

  ```javascript
  getHiddenCard('1234567812345678', 2); // '**5678'
  getHiddenCard('1234567812345678', 3); // '***5678'
  getHiddenCard('1234567812345678'); // '****5678'
  ```

tips:
  - |
    [Статья про именование в программировании](https://ru.hexlet.io/blog/posts/naming-in-programming)
  - |
    [Ментальное программирование](https://www.youtube.com/watch?v=EEq1wdM2M2w)
