---

name: Возврат значений
theory: |

  Функции в JavaScript становятся по настоящему полезными, когда они начинают возвращать данные, вместо печати их на экран. Тогда мы можем их использовать для дальнейших вычислений. Посмотрите на пример:

  ```javascript
  const message = greetHexlet();
  console.log(message);
  ```
  Мы присваиваем переменной `message` результат работы функции. Для работы такого кода, функция должна внутри себя использовать инструкцию `return`:

  ```javascript
  const greetHexlet = () => {
    const message = 'Hello, Hexlet!';
    return message;
  };
  ```

  `return` особая инструкция, которая берет выражение записанное справа и отдает его наружу, тому коду, который вызвал функцию. Само выполнение функции на этом завершается, любой код после `return` не выполняется:

  ```javascript
  const greetHexlet = () => {
    const message = 'Hello, Hexlet!';
    return message;
    console.log('Я никогда не выполнюсь');
  };
  ```

  Для возврата не обязательно использовать переменную. Так как `return` работает с выражениями, то справа от него может появиться почти все что угодно. Здесь нужно руководствоваться принципами читаемости кода:

  ```javascript
  const greetHexlet = () => {
    return 'Hello, Hexlet!';
  };
  ```

  И пример с вычислением:

  ```javascript
  const doubleFive = () => {
    return 5 + 5;
  };
  ```

  Но даже если внутри функции не прописана инструкция `return`, возврат у функции все равно есть. По умолчанию любая функция возвращает `undefined`. Например это делает функция `console.log()`, которая печатает текст на экран, но ничего не возвращает. В таком случае возврат равен `undefined`.

  ```javascript
  const result = console.log('Сюда можно поместить любой текст');
  console.log(result); // => undefined

  // Или еще проще, без создания промежуточной переменной
  console.log(console.log('Wow')); // => undefined
  ```

  Зачем нужно такое поведение? Вызов функции - выражение, а выражение всегда должно возвращать результат, иначе в коде все время возникали ошибки, в тех случаях, когда возвращаемых данных нет.

  Вопрос на самопроверку. Что выведет этот код?

  ```javascript
  // Определение
  const run = () => {
    return 5;
    return 10;
  }

  // Использование
  run(); // => ?
  ```

instructions: |

  Реализуйте функцию, которая возвращает случайное число от 0 до 10

  ```javascript
  getRandomNumber(); // 1
  getRandomNumber(); // 9
  ```

  Для выполнения этого задания, вам понадобятся:

  [Math.random()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)

  ```javascript
  Math.random(); // 0.2320000789855705
  ```

  [Math.round()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)

  ```javascript
  Math.round(2.320000789855705); // 2
  ```

# tips: []
