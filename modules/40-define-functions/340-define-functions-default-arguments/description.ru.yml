---

name: Параметры по умолчанию
theory: |

  Напомню, что аргумент может быть **необязательным**. У такого аргумента есть **значение по умолчанию**.

  Например, функция `getParentFor()`, которую вы использовали в некоторых упражнениях, принимает имя ребёнка первым аргументом, а вторым — строку `'mother'` или `'father'`. Второй аргумент — необязательный, и если не указывать его при вызове, то автоматически по умолчанию будет использоваться `'mother'`.

  Эти два вызова равнозначны:

  ```javascript
  getParentFor('Jon Snow');
  getParentFor('Jon Snow', 'mother');
  ```

  Каким образом там сделаны аргументы по умолчанию? Давайте заглянем в определение этой функции:

  ```javascript
  const getParentFor = (child, parent = 'mother') => {
    // какой-то код
  };
  ```

  Первый аргумент указан привычно — просто название переменной. Это делает аргумент *обязательным*.

  Второй аргумент указан со значением в формате `аргумент = какое_то_значение`. Точно так же, как при создании переменных и констант. Этот фрагмент `= какое_то_значение` делает аргумент *необязательным*, и задаёт ему *значение по умолчанию*.

  Аргументов по умолчанию может быть любое количество, но желательно, чтобы все они были в конце списка аргументов. То есть такие строчки кода будут некорректны:

  - `const getParentFor = (childName = 'Jon', who) => {`
  - `const calculate = (a, b = 90, c) => {`
  - `const getPrices = (code = 4161, quantity, place) => {`

  Важно! Значение по умолчанию присваивается аргументу только если при вызове функции для него не было передано значение. Если передать аргумент с любым значением (кроме `undefined`), значение по умолчанию использоваться не будет.

  ```javascript
  getParentFor('Daenerys Targaryen', 'father'); // Aerys II Targaryen
  ```

instructions: |

  Реализуйте функцию `getCustomParentFor()`, которая принимает два аргумента:

  1. Строку с именем ребёнка.
  2. Строку с указанием родителя. Этот аргумент должен по умолчанию быть `'father'`.

  Функция должна возвращать имя соответствующего родителя.

  Примеры вызова:

  ```javascript
  getCustomParentFor('Cersei Lannister'); // Tywin Lannister
  getCustomParentFor('Daenerys Targaryen', 'mother'); // Rhaella Targaryen
  ```

  Такой вызов вернёт имя отца.

  - Внутри своей функции используйте уже готовую функцию `getParentFor()`. Как она работает, мы подробно [разбирали](https://ru.code-basics.com/languages/javascript/lessons/return) раньше.
