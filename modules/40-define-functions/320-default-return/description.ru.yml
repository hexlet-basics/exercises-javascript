---

name: Возврат по умолчанию
theory: |

  Рассмотрим немного модифицированную функцию из предыдущего урока:

  ```javascript
  const sub = (a, b) => {
    // Полученный результат никак не используется
    // и не возвращается наружу
    const answer = a - b;
  }

  const result = sub(10, 7);
  console.log(result); // undefined
  ```

  Несмотря на отсутствие `return` внутри функции, `console.log()` выведет на экран `undefined`. Это стандартное поведение функций в JavaScript, оно существует не просто так. Вызов функции – выражение, а выражения **всегда** возвращают результат своего выполнения.

  Забыть инструкцию `return` — частая ошибка новичка. Мы в обучении каждый день сталкиваемся с просьбами о помощи типа «функция правильная, но почему-то не работает». И почти всегда оказывается, что забыт `return`, а результат, вместо возврата, просто печатается на экран.

  С другой стороны, если написать инструкцию `return` без указания выражения после него, то наружу вернется все тот же `undefined`. Кажется, что подобный возврат не имеет смысла, но это не так. `return` без выражения нередко используют для прерывания вычислений. Подробнее эта тема раскрывается в модуле, посвященному условным конструкциям.

  Вопрос для самопроверки. Что возвращает функция `console.log()`?

instructions: |

  Это немного странное задание, но для тренировки будет полезным. Реализуйте функцию `doNothing()`, которая ничего не делает)

tips: []
