---

name: Интерполяция
theory: |

  В уроке про конкатенацию перед нами стояла задача создать заголовок письма из двух констант и знаков препинания. Вы скорее всего решили задачу так:

  ```javascript
  const firstName = 'Joffrey';
  const greeting = 'Hello';

  console.log(greeting + ', ' + firstName + '!');
  ```

  Это довольно простой случай, но — наверное, вы согласитесь — выглядит это немного безобразно. Нужно следить за несколькими кавычками и пробелами, и без вглядывания не понять, где что начинается и кончается.

  Есть другой, более удобный и изящный способ решения той же задачи — **интерполяция**. Вот, как это выглядит:

  ```javascript
  const firstName = 'Joffrey';
  const greeting = 'Hello';

  // Обратите внимание на ограничители строки, это не одинарная кавычка
  console.log(`${greeting}, ${firstName}!`);
  ```

  Мы просто создали одну строку и «вставили» в неё в нужные места константы с помощью знака доллара и фигурных скобок `${ }`. Получился как будто бланк, куда внесены нужные значения. И нам не нужно больше заботиться об отдельных строках для знаков препинания и пробелов — все эти символы просто записаны в этой строке-шаблоне.

  В одной строке можно делать сколько угодно подобных блоков.

  **Интерполяция работает только со строками в [бэктиках](https://ru.wikipedia.org/wiki/Машинописный_обратный_апостроф).**

  Почти во всех языках интерполяция предпочтительнее конкатенации для объединения строк. Строка при этом получается склеенная, и внутри неё хорошо просматриваются пробелы и другие символы.

instructions: |

  Выведите на экран строку `Do you want to eat, <name>?`. Где вместо `<name>` должна использоваться константа `stark`. Вывод должен получиться таким:

  <pre class='hexlet-basics-output'>
  Do you want to eat, Arya?
  </pre>

tips: []

definitions:
  - name: Интерполяция
    description: "способ соединения строк через вставку значений переменных в строку-шаблон с помощью фигурных скобок. Например, `` `Hi, ${name}!` ``."
