---

name: Ошибки при работе с переменными
theory: |

  Порядок следования инструкций в коде с переменными играет огромное значение. Переменная должна быть определена  до того, как будет использована. Ниже пример ошибки, которую очень часто допускают новички:

  ```javascript
  // Uncaught ReferenceError: greeting is not defined
  console.log(greeting);
  let greeting = 'Father!';
  ```

  Запуск программы с примера выше завершается ошибкой *ReferenceError: greeting is not defined*. *ReferenceError* - это ошибка обращения, она означает, что в коде используется имя (говорят идентификатор), которое не определено. Причём в самой ошибке об этом говорят прямо: *greeting is not defined*, что переводится как *greeting не определен*. Кроме неправильного порядка определения, в JavaScript встречаются банальные опечатки — как при использовании переменной, так и при её объявлении.

  Количество подобных ошибок уменьшается за счет использования правильно настроенного редактора. Такой редактор подсвечивает имена, которые используются без объявления и предупреждает о возможных проблемах.

  Еще одна распространенная ошибка — попытаться объявить уже объявленную переменную:

  ```javascript
  let greeting = 'Father!';
  let greeting = 'Father!';
  ```

  Так делать нельзя. Придётся создать новую переменную.

instructions: |

  Найдите в программе необъявленную переменную и объявите ее, присвоив ей значение 'Dragon';

  После выполнения программы результат на экране должен выглядеть так:

  <pre class='hexlet-basics-output'>
  Targaryen
  and
  Dragon
  </pre>

tips: 
  - |
    [ReferenceError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)

definitions:
  - name: Переменная
    description: способ сохранить информацию и дать ей имя для последующего использования в коде.
