---

name: Константы
theory: |

  На протяжении всего модуля, подавляющее большинство примеров кода, использовали переменные как имена (псевдонимы) конкретных значений, но не как переменные, которые меняют свое значение со временем.

  ```javascript
  let dollarsInEuro = 1.25;
  let roublesInDollar = 60;

  let euros = 1000;
  let dollars = euros * dollarsInEuro; // => 1250
  let rubles = dollars * roublesInDollar; // => 75000

  console.log(rubles);
  ```

  В программировании, принято называть такие имена константами и многие языки поддерживают константы как конструкцию. JS, как раз, относится к таким языкам и его стандарты кодирования говорят прямо, если значение не меняется, то мы имеем дело с константой. Перепишем пример выше на использование констант:

  ```javascript
  const dollarsInEuro = 1.25;
  const roublesInDollar = 60;

  const euros = 1000;
  const dollars = euros * dollarsInEuro; // => 1250
  const rubles = dollars * roublesInDollar; // => 75000

  console.log(rubles);
  ```

  Единственное изменение, ключевое слово `let` заменилось на `const`, но это только синтаксис. Теперь, если попытаться изменить любую константу, то мы получим сообщение об ошибке. В остальном они используются точно так же как и переменные.

  Зачем такие сложности? Почему бы не оставить только переменные? Даже если бы мы оставили только переменные, то это не отменяет того факта, что они часто использовались бы как константы, более того, код на js можно и идеоматично писать без использования переменных вообще. Посмотрите на пример из [реального кода Хекслета](https://github.com/Hexlet/hexlet-exercise-kit/blob/master/import-documentation/src/index.js). На текущем этапе вы его врядли поймете, но попробуйте посчитать количество констант и переменных внутри него, вы увидите что здесь ровно одна переменная, и целая куча констант.

  Константы значительно проще для анализа, когда мы видим константу в коде, то нам сразу понятно что ее значение всегда остается прежним. При использовании констант отсутствует понятие времени. С переменными все не так, мы не можем быть уверены в ее значении, приходится анализировать весь код чтобы понять как она могла измениться.

  Как вы увидите позже, переменные жизненно необходимы только в одном случае (во всех остальных гарантировано можно обойтись без них) - при работе с циклами, до которых мы еще дойдем.

  В дальнейшем мы будем предпочитать константы и использовать переменные только тогда, когда без них никак.

instructions: |

  Создайте константу `army`, присвойте ей значение `'the white walkers'` и распечайте ее значение на экран.


tips: []
