---

name: Цикл While
theory: |

  Компьютеры, не уставая, могут повторять действия десятки, сотни, тысячи раз. В программировании для выполнения таких операций повторения используются **циклы**.

  Напишем функцию с циклом, который будет выводить на экран числа от 1 до числа-аргумента:

  ```javascript
  const printNumbers = (lastNumber) => {
    let i = 1;

    while (i <= lastNumber) {
      console.log(i);
      i = i + 1;
    }
    console.log('finished!');
  }

  printNumbers(3);
  ```

  <pre class='hexlet-basics-output'>
  1
  2
  3
  finished!
  </pre>

  Цикл `while` состоит из трех элементов:

  * Ключевое слово `while`.
  * Предикат (условие, которое указывается в скобках после `while`).
  * Тело цикла (блок кода в фигурных скобках).

  Конструкция читается так: «делать то, что указано в теле цикла, пока истинно условие (предикат) `i <= lastNumber`».

  Каждое выполнение тела называется **итерацией**. В нашем примере вызов `printNumbers(3)` порождает три итерации. При каждой итерации на экран выводится значение переменной `i`.

  Самое главное в цикле — завершение его работы (выход из цикла). Процесс, который порождает цикл, должен в конце концов остановиться. Ответственность за остановку полностью лежит на программисте.

  Обычно задача сводится к введению переменной, называемой «счётчиком цикла». Сначала счётчик инициализируется, то есть ему задаётся начальное значение. В нашем примере это строка `i = 1`. Затем в условии цикла проверяется, достиг ли счетчик своего предельного значения.

  В примере предельное значение определяется аргументом функции. Если условие истинно, то выполняется тело цикла, в котором происходит изменение счётчика — ключевого элемента остановки. Обычно счётчик изменяют в конце тела, и это изменение — один из редких случаев, когда невозможно обойтись без переменной. В примере за изменение счётчика отвечает строка `i = i + 1`. Если же условие оказывается ложным, то тело не выполняется. Интерпретатор двигается дальше и продолжает выполнять иструкции, следующие после цикла.

instructions: |

  Модифицируйте функцию `printNumbers` так, чтобы она выводила числа в обратном порядке. Для этого нужно идти от верхней границы к нижней. То есть счётчик должен быть инициализирован максимальным значением, а в теле цикла его нужно уменьшать до нижней границы.

  Пример вызова и вывода:

  ```javascript
  printNumbers(4);
  // => 4
  // => 3
  // => 2
  // => 1
  // => finished!
  ```

tips:
  - |
    [Цикл while](https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/while)

definitions:
  - name: Цикл While
    description: Инструкция для повторения кода, пока удовлетворяется какое-то условие.
