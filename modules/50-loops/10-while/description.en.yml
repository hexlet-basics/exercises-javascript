---

name: While loop
theory: |
  
  Our code is getting more and more complex and extensive. It's still quite far from real applications, which contain tens or hundreds of thousands (sometimes millions) lines of code. However, our code is already complex enough to make inexperienced programmers feel a bit tense. Starting from this lesson, we move on to one of the most difficult basic topics in programming: loops.

  All applications serve very pragmatic purposes. They help to manage employees, finances, and entertain, after all. Despite the differences, all these programs contain and execute similar algorithms. What is it? An algorithm is a sequence of actions (statements) which lead us to some expected result. This description fits any program in general, but by algorithms we usually mean something more specific.

  Imagine that we have a book and we want to find a particular phrase within it. We remember the phrase itself, but we don't know what page it is on. How do we find the right page? The easiest (and longest) way is to look through the pages one by one until we find the right one. In the worst case we have to look through all the pages, but we still get the result. This very process is called an algorithm. It includes a logical verification (if the phrase is found) and page exhaustive search. The number of pages you will have to look through is unknown, but the process repeats itself from time to time in exactly the same way. This is why we need loops to perform repetitive actions. In this case, each repetition is called an iteration.

  Say we want to write a function that prints all numbers from 1 to a given number (via arguments):

  ```javascript
  printNumbers(3);
  // => 1
  // => 2
  // => 3
  ```

  You can't implement this function with the tools you've already learned, because the number of outputs is unknown beforehand. But with loops this won't be a problem:

  ```javascript
  const printNumbers = (lastNumber) => {
    // i means index
    // it's widely accepted in many languages
    // as loop counter
    let i = 1;

    while (i <= lastNumber) {
      console.log(i);
      i = i + 1;
    }
    console.log('finished!');
  };

  printNumbers(3);
  ```

  <pre class='hexlet-basics-output'>
  1
  2
  3
  finished!
  </pre>

  Here we use the `while` loop. It has three elements:

  * Keyword `while`. It is not a function call, although it resembles it.

  * Predicate. A condition given in parentheses after `while`. This condition must be evaluated and tested before executing the loop body at each iteration.

  * Loop body. Block of code in curly braces. This block is equivalent to the code block in functions. Anything that is defined inside this block (constants or variables) is visible only within this block.

  You can read it as follows: "as long as the condition (predicate) `i <= lastNumber` is true, execute code from the body of the loop". Let's analyze how this code works for a function call `printNumbers(3)`:

  ```javascript
  // Initializing i
  let i = 1;

  // Predicate is true, so execute loop body
  while (1 <= 3)
  // console.log(1);
  // i = 1 + 1;

  // Закончилось тело цикла, поэтому происходит возврат в начало
  while (2 <= 3)
  // console.log(2);
  // i = 2 + 1;

  // The loop body is executed, so we return to the beginning
  while (3 <= 3)
  // console.log(3);
  // i = 3 + 1;

  // Predicate is false, so execution goes beyond loop
  while (4 <= 3)

  // console.log('finished!');
  // On this step i is 4, but we don't need it anymore
  // function terminates
  ```

  The main purpose of a loop is to end it (exit from a loop). The process which generates the loop must eventually stop. It is up to the programmer to stop it. Usually this comes down to introducing a variable called the "loop counter". The counter should first be initialized, that is, you must assign it an initial value. In our example, it's the statement `let i = 1`, which is executed before the loop. Then the loop condition tests if the counter has reached its limiting value. Finally, the counter changes its value to `i = i + 1`.

  This is where beginners make the most mistakes. For example, accidentally forgetting to increment the counter or an incorrect predicate check can lead to an infinite loop. In this case the loop works endlessly and the program never stops. We then have to end it forcibly (it's possible that when real applications freeze, an infinite loop is running inside them).

  ```javascript
  const printNumbers = (lastNumber) => {
    let i = 1;

    // This loop never ends
    // and will print the same value
    while (i <= lastNumber) {
      console.log(i);
    }
    console.log('finished!');
  };
  ```

  In some cases infinite loops are useful. We don't deal with those cases here, but it is instructive to see how it looks like:

  ```javascript
  while (true) {
    // do something
  }
  ```

  To sum up. When do we need loops and when can we do without them? It is physically impossible to do without loops when the problem-solving algorithm requires repetition of some actions, as in the book example, and the number of these actions is unpredictable.

instructions: |

  Edit the `printNumbers()` function so that it prints the numbers in reverse order. To do this, go from the upper bound to the lower bound. That is, you should initialize the counter with the maximum value, and in the loop body you should decrease it to the lower limit.

  ```javascript
  printNumbers(4);
  ```

  <pre class='hexlet-basics-output'>4<br>3<br>2<br>1<br>finished!</pre>

tips:
  - |
    [*while* loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while)

definitions:
  - name: | 
      *while* loop
    description: the statement which repeatedly executes code as long as test condition is true
