---

name: Агрегация данных
theory: |

  Отдельный класс задач, который не может обойтись без циклов, называется агрегированием данных. К таким задачам относятся поиск максимального, минимального, суммы, среднего арифметического и т.п. Их главная особенность – в том что результат зависит от всего набора данных. Для рассчета суммы нужно сложить **все** числа, для вычисления максимального нужно сравнить **все** числа.

  С такими задачами хорошо знакомы все кто занимаются числами, например, бухгалтера или маркетологи. Обычно их выполняют в таблицах наподобие Microsoft Excel или Google Tables.

  Разберем самый простой пример – поиск суммы. Реализуем функцию, которая складывает числа в указанном диапазоне включая границы.

  ```javascript
  sumNumbersFromRange(5, 7); // 5 + 6 + 7
  ```

  Для реализации этого кода нам понадобится цикл, так как сложение чисел это итеративный процесс (он повторяется для каждого числа), а количество итераций зависит от размера диапазона. Перед тем как смотреть код, попробуйте ответьте на вопросы ниже:

  * Каким значением инициализировать счетчик?
  * Как он будет изменяться?
  * Когда цикл должен остановиться?

  Теперь посмотрим код:

  ```javascript
  const sumNumbersFromRange = (start, end) => {
    // Технически можно менять start
    // Но входные аргументы нужно оставлять в исходном значении
    // Это сделает код проще для анализа
    let i = start;
    let result = 0; // Инициализация суммы

    while (i <= end) {
      result = result + i;
      i = i + 1;
    }

    // Возвращаем получившийся результат
    return result;
  };
  ```

  Общая структура цикла здесь стандартна. Есть счетчик, который инициализируется начальным значением диапазона, есть сам цикл с условием остановки при достижении конца диапазона, и, наконец, изменение счетчика в конце тела цикла. Количество итераций в таком цикле равно `end - start + 1`. То есть для диапазона от 5 до 7 это 7 - 5 + 1, то есть 3 итерации.

  Главные отличия от обычной обработки связаны с логикой вычислений результата. В задачах на агрегацию всегда есть какая-то переменная, которая хранит внутри себя результат работы цикла. В коде выше это `result`. На каждой итерации цикла, происходит ее изменение, прибавление следующего числа в диапазоне: `result = result + i`. Весь процесс выглядит так:

  ```javascript
  // Для вызова sumNumbersFromRange(2, 5);
  let result = 0;
  result = result + 2; // 2
  result = result + 3; // 5
  result = result + 4; // 9
  result = result + 5; // 14
  // 14 – результат сложения чисел в диапазоне [2, 5]
  ```

  У переменной `result` есть начальное значение равное 0. Зачем вообще задавать значение? Любая повторяющаяся операция начинается с какого-то значения. Нельзя просто так объявить переменную и начать с ней работать внутри цикла. Это приведет к неверному результату:

  ```javascript
  // начальное значение не задано
  // js автоматически делает его равным undefined
  let result;

  // первая итерация цикла
  result = result + 2; // ?
  ```

  В результате такого вызова, внутри `result` окажется `NaN`, то есть не-число. Оно возникает из-за попытки сложить `2` и `undefined`. Значит какое-то значение все же нужно. Почему в коде выше выбран 0? Очень легко проверить, что все остальные варианты приведут к неверному результату. Если начальное значение будет равно 1, то результат получится на 1 больше чем нужно.

  В математике существует понятие **нейтральный элемент операции** (у каждой операции свой элемент). Это математическое понятие имеет очень простой смысл. Операция с этим элементом не изменяет то значение, над которым проводится операция. В сложении любое число плюс ноль дает само число. При вычитании тоже самое. Даже у конкатенации есть нейтральный элемент – это пустая строка: `'' + 'one'` будет 'one'.

  Перепишем исходную функцию, так, чтобы она возвращала не сумму, а строила строку состоящую из чисел в диапазоне.

  ```javascript
  const joinNumbersFromRange = (start, end) => {
    let i = start;
    let result = ''; // Пустая строка!

    while (i <= end) {
      result = `${result}${i}`;
      // тоже самое
      // result = result + i;
      i = i + 1;
    }

    return result;
  };

  joinNumbersFromRange(5, 7); // '567'
  ```

  Вопрос на самопроверку. Какой нейтральный элемент у операции умножения?

instructions: |

  Реализуйте функцию `multi` которая перемножает числа в указанном диапазоне вклюая границы диапазона. Пример вызова:

  ```javascript
  multi(5, 5); // 5
  multi(1, 3); // 6
  ```

tips: []
