---

name: Цикл For
theory: |

  Цикл `while` идеален для ситуаций, когда количество итераций неизвестно заранее, например, при поиске простого числа. Когда количество итераций известно, предпочтительнее использовать цикл `for`.

  Посмотрим реализацию переворота строки через цикл `for`:

  ```javascript
  const reverseString = (str) => {
    let index = str.length - 1;
    let result = '';

    for (index; index >= 0; index--) {
      currChar = str[index];
      result = `${result}${currChar}`;
    }

    return result;
  };
  ```

  Можно читать так: *«цикл с индексом `index` повторяется пока `index >= 0` и после каждого шага уменьшает `index` на 1»*.

  В определении цикла `for` есть:

  1. начальное значение счетчика
  1. предикат-условие повторения циклов
  1. описание того, как счётчик меняется после каждого шага

  В остальном принцип работы точно такой же, как у цикла `while`.

  ---

  Давайте рассмотрим ход движения программы на примере вызова функции с простой строкой:

  ```javascript
  reverseString('cat');
  ```

  В строке 3 символа, поэтому в цикле будет 3 итерации:

  ![](https://i.imgur.com/MAsR2eJ.png)

  Для удобства одинаковыми цветами отмечены одинаковые значения. Как видите, счётчик в цикле меняется **после** шага.

instructions: |

  Реализуйте функцию `sumOfSeries`, которая считает сумму [ряда целых чисел](https://ru.wikipedia.org/wiki/Числовой_ряд). Ряд задаётся двумя числами — начальным и конечным.

  Функция принимает два аргумента-числа и возвращает сумму ряда. Например, для аргументов `4, 7` сумма будет `4 + 5 + 6 + 7 = 22`.

  ```javascript
  sumOfSeries(1, 2); // => 3
  sumOfSeries(1, 3); // => 6
  sumOfSeries(4, 7); // => 22
  ```

  Если начальное и конечное числа равны, то результатом будет то же число:

  ```javascript
  sumOfSeries(1, 1); // => 1
  ```

tips: []
