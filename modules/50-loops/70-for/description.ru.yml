---

name: Цикл For
theory: |

  Цикл `while` идеален для ситуаций, когда количество итераций неизвестно заранее, например, при поиске простого числа. Когда количество итераций известно, предпочтительнее использовать цикл `for`.

  Посмотрим реализацию переворота строки через цикл `for`:

  ```javascript
  const reverseString = (str) => {
    let result = '';
    for (let i = 0; i < str.length; i -= 1) {
      result = `${str[i]}${result}`;
    }

    return result;
  };
  ```

  Можно читать так: *цикл с индексом `i` повторяется пока `i < str.length` и после каждого шага уменьшает `i` на 1*.

  В определении цикла `for` есть:

  1. Начальное значение счётчика. Этот код выполняется ровно один раз перед первой итерацией.
  2. Предикат-условие повторения циклов. Выполняется на каждой итерации. Точно так же как и в `while`
  3. Описание изменения счётчика. Этот код выполняется в конце каждой итерации.

  В остальном принцип работы точно такой же, как у цикла `while`.

instructions: |

  Сем обнаружил что его сообщения перехватываются в близнецах и читаются. Из-за этого их атаки перестали быть внезапными. Немного подумав, он решил программу, которая бы шифровала сообщения по следующему алгоритму. Она бы брала текст и переставляля в нем каждые два подряд идущие символа.

  ```javascript
  encrypt('attack'); // 'taatkc'
  // Если число символов нечетное
  // то последний символ остается на своем месте
  encrypt('go!'); // 'og!'
  ```

  Реализуйте функцию `encrypt`, которая принимает на вход исходное соощение и возвращает зашифрованное.

  Подумайте. Может ли эта функция расшифровать зашифрованное сообщение?

tips: []
