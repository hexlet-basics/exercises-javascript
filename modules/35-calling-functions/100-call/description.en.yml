---

name: Calling functions
theory: |

  The addition, concatenation, finding the remainder, and the other operations discussed are all basic programming language features. Math is not limited to arithmetic, there are many other domains with their own operations, e.g., geometry. The same goes for strings: you can flip them, change a letter case, delete extra characters – and that's just the tip of the iceberg. And finally, at a higher level, there is the applied logic of a particular program. Programs withdraw money, calculate taxes, and generate reports. The number of such jobs is endless and individual for each program. And they all have to be somehow expressed in code.

  With a notion of a *function* we express any arbitrary operation in programming. Functions can be both built-in and manually written by a programmer. We are already familiar with one built-in function, it is `log()` in the `console.log()` call.

  Functions are fundamental building blocks in programming, and it is impossible to accomplish something without them. We get acquainted with them beforehand because the following courses deal almost exclusively with functions. We will learn how to use the functions we have already defined and to define our own functions.

  We will start with basic functions handling strings. Below is an example of a `length()` function call, which counts the number of characters in a string:

  ```javascript
  // length is a function
  import { length } from 'hexlet-basics/string';

  // length function call with 'Hello!' argument
  const result = length('Hello!');
  console.log(result); // => 6
  ```

  A lyrical digression. The first line in this code is an import of a function from another module. You will learn about imports and modules on Hexlet, and here they will be "as is" because we need them to use functions defined in other files. Don't bother if you don't understand the meaning of this step, you can learn more about it in our course [Intro to Programming](https://en.hexlet.io/courses/intro_to_programming).

  Parameters (or arguments) represent the data the function receives when you call it. This data is what the function uses to compute something and return a result.

  We have defined a `result` constant and told the interpreter to assign it a result returned by the `length()` function call. In this sense, functions are like operations – they always return the result of their job. Writing `length('Hello!')` means that we call the function named *length* which takes the parameter `'Hello!'`. The function `length()` counts the length of the string passed to it.

  The function call is always indicated by parentheses `()` following the function name. There can be any number of parameters in parentheses, even zero. The number depends on the function used. Consider as an example the function `pow()`, which raises a given number to a given power. It takes two parameters as input and raises the number passed in the first parameter to the power passed in the second parameter.

  ```javascript
  import { pow } from 'hexlet-basics/math';

  const result = pow(2, 3); // 2 * 2 * 2
  console.log(result); // => 8
  ```

  Broadly speaking, operators and functions are the same thing. The only key difference is how they are written. If you think of addition as a function, it would look like this:

  ```javascript
  3 + 5; // 8
  sum(3, 5); // 8
  // or even like this
  // You can't write like this in JS, but there are languages (lisp)
  // which use similiar syntax (check out our course on Racket)
  +(3, 5);
  ```

  Self-check. How would you know what the `console.log()` call returns? Test it.

instructions: |

  The program code features two constants containing company names. Calculate their total character length and print it.

tips: []

# definitions:
#   - name: Функция
#     description: "операция, способная принимать данные и возвращать результат; функция вызывается так: `foo()`."
#   - name: Аргумент
#     description: "информация, которую функция получает при вызове. Например, `foo(42)` — передача аргумента `42` функции `foo()`"
