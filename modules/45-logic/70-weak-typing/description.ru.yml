---

name: Слабая типизация
theory: |

  В модуле «Арифметика» мы затронули тему слабой типизации.

  JavaScript — это язык со **слабой типизацией**. Он знает о существовании разных типов (числа, строки и др.), но относится к их использованию не очень строго, пытаясь преобразовывать информацию когда это кажется разумным.

  Особенно много автоматических преобразований происходит при работе с логическими операциями.

  Пример:

  ```javascript
  console.log(0 || 1);
  ```

  <pre class='hexlet-basics-output'>1</pre>

  Что тут произошло:

  Оператор **ИЛИ** работает так, что его выполнение (слева на право) прерывается и возвращается результат первого аргумента, который можно преобразовать в `true`.

  Пример:

  ```javascript
  console.log(0 && 1);
  ```

  <pre class='hexlet-basics-output'>0</pre>

  Что тут произошло:

  Оператор **И** работает так, что его выполнение (слева на право) прерывается и возвращается результат первого аргумента, который можно преобразовать в `false`.

  В JavaScript есть два простых правила, по которым происходят преобразования:

  * `0`, `''`, `undefined` превращаются в `false`
  * Всё остальное превращается в `true`
  * `null` это особый тип данных, который не преобразуется

  ```javascript
  console.log(true);
  ```

  <pre class='hexlet-basics-output'>true</pre>

  ```javascript
  console.log(null);
  ```

  <pre class='hexlet-basics-output'>null</pre>

  ---

  В одном из уроков мы рассмотрели операторы сравнения `===` и `!==` и упомянули, что в JavaScript так же есть операторы `==` и `!=`, но их не стоит использовать. Отличия как раз заключаются в преобразовании типов:

  ```javascript
  console.log('' === false); // => false
  console.log('' == false);  // => true
  ```

  Пустая строка и `false` — это разные значения, поэтому оператор `===` говорит «ложь! они не равны!».

  Но оператор `==` преобразует типы, и с его точки зрения пустая строка и `false` равны.

  Это преобразование неявное, поэтому по возможности избегайте операторов `==` и `!=`.

  ---

  Вспомните операцию отрицания:

  ```javascript
  const answer = true;
  console.log(!answer);  // => false
  ```

  При двойном отрицании `!!` итоговое значение равно начальному:

  ```javascript
  const answer = true;
  console.log(!!answer);  // => true
  ```

  Но здесь дополнительно происходят преобразования типа. Поэтому результатом двойного отрицания всегда будет _bool_. Этим приемом пользуются, чтобы поменять тип данных.

  ---

  В разных языках программирования разные правила преобразований. Некоторые языки вообще не преобразовывают типы сами.

instructions: |

  Напишите функцию `isFalsy`, которая проверяет, трактуется ли переданное значение как ложное с точки зрения JavaScript. Для выполнения этой проверки вам понадобится сравнить `false` с переданным значением, используя `==`.

tips:
  - |
    [Boolean](https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/Boolean)
