---

name: Предикаты
theory: |

  Вспомним функцию `isInfant()` из прошлого урока:

  ```javascript
  const isInfant = (age) => age < 1;
  console.log(isInfant(3));
  ```

  <pre class='hexlet-basics-output'>false</pre>

  Подобные функции называют предикатами. Функции-предикаты (или функции-вопросы) отвечают на какой-то вопрос и всегда (без исключений!) возвращают либо `true` либо `false`.

  Предикаты во всех языках принято именовать особым образом для простоты анализа. В JavaScript предикаты, как правило, начинаются с префикса `is`, `has` или `can`, но не ограничены этими словами. Примеры:

    * `isInfant()` — «младенец ли?»
    * `hasChildren()` — «есть ли дети?»
    * `isEmpty()` — «пустой ли?»
    * `hasErrors()` — «есть ли ошибки?»

  Функция может считаться предикатом **только** если она возвращает bool.

  ---

  Давайте напишем еще одну функцию-предикат. Она принимает строку и проверяет, является ли она словом `'Castle'`:

  ```javascript
  const isCastle = (type) => type === 'Castle';

  console.log(isCastle('Sea'));
  ```

  <pre class='hexlet-basics-output'>false</pre>


instructions: |

  Напишите функцию `isMister()`, которая принимает строку и проверяет, является ли она словом `'Mister'`.

  Примеры вызова:

  ```javascript
  isMister('Mister'); // true
  isMister('Miss');   // false
  ```

tips:
  - |
    [Именование в программировании](https://ru.hexlet.io/blog/posts/naming-in-programming)

definitions:
  - name: "Предикат"
    description: "выражение, отвечающее на вопрос «да» или «нет» с помощью типа bool."
