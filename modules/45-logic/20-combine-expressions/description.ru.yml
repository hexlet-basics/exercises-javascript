---

name: Комбинирование операций и функций
theory: |

  Логические операции — это выражения. Значит, логические операции можно комбинировать с другими выражениями.

  Например, мы хотим проверить чётность числа, то есть кратность двум. В программировании используют такой подход:

  * проверяют остаток от деления на 2:
    * если остаток 0, то число было чётным
    * если остаток не 0, то число было нечётным

  Остаток от деления — простая, но очень важная концепция в арифметике, алгебре, и даже в теории чисел и криптографии. Идея проста: нужно разделить число на несколько равных групп, и если в конце что-то останется — это и есть остаток от деления.

  Делим конфеты поровну между людьми:

  - 7 конфет, 2 человека: 2 x 3 + **остаток 1**.
    Значит, 7 не кратно 2.
  - 21 конфету, 3 человека: 3 x 7 + **остаток 0**.
    Значит, 21 кратно 3.
  - 19 конфет, 5 человек: 5 x 3 + **остаток 4**.
    Значит, 19 не кратно 5.

  Оператор `%` вычисляет остаток от деления (не путайте с делением):

  - `7 % 2` → `1`
  - `21 % 3` → `0`
  - `19 % 5` → `4`

  С помощью него напишем функцию проверки чётности:

  ```javascript
  const isEven = (number) => number % 2 === 0;

  isEven(10); // true
  isEven(3);  // false
  ```

  В одном выражении мы скомбинировали логический оператор `===` (проверка равенства) и арифметический оператор `%`.

  Приоритет арифметических операций выше логических. Значит, сначала вычисляется арифметическое выражение `number % 2`, затем результат участвует в логическом сравнении.

  По-русски это можно расшифровать так: *«вычислить остаток от деления числа `number` на 2 и сравнить, равен ли остаток нулю; затем вернуть результат проверки равенства»*.

  ---

  Другой пример: напишем функцию, которая принимает строку и проверяет, заглавная ли первая буква.

  Алгоритм:

  1. Получим и запишем в переменную первый символ из строки-аргумента.
  1. Сравним, равен ли символ своей большой (заглавной) версии.
  1. Вернём результат.

  ```javascript
  const isFirstLetterInUpperCase = (string) => {
    const firstLetter = string[0];
    return firstLetter.toUpperCase() === firstLetter;
  }

  isFirstLetterInUpperCase('marmont'); // false
  isFirstLetterInUpperCase('Robb');    // true
  ```

  Мы использовали [метод `toUpperCase()`](https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase). Он возвращает строку, на которой он был вызван, в которой все буквы стали заглавными. Мы вызвали его на первом символе строки.

  Попробуйте проговорить происходящее по-русски, аналогично тому, как мы расшифровывали процесс в примере с `isEven()` в начале урока.

  ---

  *Напомним об извлечении символов из строки с помощью квадратных скобок:*

  ```javascript
  const firstName = 'Alexander';

  firstName[0]; // A
  ```

instructions: |

  Сэм решил изучить историю Таргариенов со времени первых людей, но книг было много и информация могла находиться в любой из них. К счастью для Сэма, большинство книг были оцифрованы молодыми мейстерами. Он подумал, что неплохо бы написать функцию, которая анализирует тексты на наличие в них упоминания фамилии Таргариенов.

  Реализуйте функцию `hasTargaryenReference()`, которая принимает на вход строку и проверяет начинается ли она с `Targaryen`. Сделать это легко используя метод `substring()`, который принимает на вход два параметра:

  * Индекс, с которого нужно взять подстроку (включает в подстроку)
  * Индекс, до которого нужно взять подстроку (не включает в подстроку)

  Этот метод позволяет извлечь начало подстроки такой же длины, как и слово `Targaryen`, а затем проверить равно ли оно `Targaryen`. Напомню, что индексы начинаются с нуля.

  ```javascript
  hasTargaryenReference('');          // false
  hasTargaryenReference('Targari');   // false
  hasTargaryenReference('targaryen'); // false
  hasTargaryenReference('Targaryen'); // true
  ```

tips:
  - |
    [substring()](https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/substring)
