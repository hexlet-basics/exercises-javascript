---

name: Loose typing
theory: |

  We know two different data types: numbers and strings. For example, we can add numbers, because the addition is an operation for the type "numbers".

  But what if you add a number to a string?

  ```javascript
  console.log(1 + '7'); // => '17'
  ```

  Even though `'7'` is a string, the JavaScript interpreter returned `17` as if we were adding two strings. When JavaScript notices a type mismatch, it tries to convert the data. In our case, it converts the number `1` to the string `'1'` and then just concatenates `'1'` and `'7'`.

  Not all languages can do this. JavaScript is a loosely typed language. It recognizes different data types (numbers, strings, etc.), but uses them not so strictly, trying to convert data when it seems reasonable. JavaScript sometimes even rushing into extremes. Most expressions that don't work in other languages work perfectly well in JavaScript. Try to perform any arithmetic operation (except addition) with strings or another data type (except when both operands are numbers or strings consisting only of numbers). You will see that they always work and return `NaN`, which makes sense.

  ```
  const result = 'one' * 'two';
  console.log(result); // => NaN
  ```

  In **strongly typed** languages, adding a number to a string won't work.

  JavaScript was created for the Internet, where all information is stored in strings. Even when you type a phone number or a birth year on a website, that information goes to the server as a string, not as a number. So the designers of the language decided that automatic type conversion is correct and convenient.

  Such implicit automatic type conversion is convenient indeed. But in practice, this feature causes a lot of errors, which are difficult to find. The code may work or fail, depending on whether you are lucky enough to have an automatic conversion done correctly. The programmer may not notice this immediately.

  You will encounter such cases more than once in further tasks. You will often ask "Why doesn't my code work the way I expect?"

  Loose typing runs like a thread through the whole Javascript development process.

instructions: |

  Print the result of `7 - (-8 - -2)`. Convert `7` to a string. Experiment with other numbers too.

tips: []
