---

name: |
  Primitive data types immutability

theory: |

  What happens if you change a character in a string?

  ```javascript
  let firstName = 'Alexander';
  // the code will run correctly
  firstName[0] = 'B';
  console.log(firstName); // => 'Alexander'
  ```

   Oddly, the value of the `firstName` variable remains the same, while the code executes without errors. It's possible due to the immutability of primitive types in JavaScript: it doesn't provide any means to change a string itself. The immutability of primitives is important for many reasons, and performance is a key one. But how do we edit a string? We have variables for this purpose:

  ```javascript
  let firstName = 'Alexander';
  // the code will run correctly
  firstName = 'Blexander'
  console.log(firstName); // => 'Blexander'
  ```

  There is a big difference between changing the value of a variable and the value itself. You can't change primitive types in JavaScript (but you can change composite types, learn more about it on Hexlet), but changing the value of a variable is not a problem.

instructions: |
  Given three constants with different people's names. Make up and print the word out of the characters in this order:

  1. The third character from the first line.
  2. The second character from the second line.
  3. The fourth character from the third line.
  4. The fifth character from the second line.
  5. The third character from the second line.

  Try using interpolation: you can put individual characters called via square brackets inside curly brackets just as variables.

tips: []

definitions: []
