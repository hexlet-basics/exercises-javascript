---

name: Экранирующие последовательности
theory: |

  Мы хотим показать диалог Матери Драконов со своим ребёнком:

  ```
  - Are you hungry?
  - Aaaarrrgh!
  ```

  Если вывести на экран строку с таким текстом:

  ```
  console.log('- Are you hungry?- Aaaarrrgh!');
  ```

  то получится так:

  ```
  - Are you hungry?- Aaaarrrgh!
  ```

  Нам нужно как-то сказать интерпретатору «нажать на энтер» — сделать перевод строки после вопросительного знака.

  В JavaScript `\n` — это перевод строки:

  ```javascript
  console.log('- Are you hungry?\n- Aaaarrrgh!');
  ```

  результат:

  ```
  - Are you hungry?
  - Aaaarrrgh!
  ```

  `\n` — это пример **экранирующей последовательности** (escape sequence). Их ещё называют управляющими конструкциями.

  Набирая текст в каком-нибудь Word, вы нажимаете на <kbd>Enter</kbd> в конце строчки. Редактор при этом ставит в конец строчки специальный невидимый символ, который называется **LINE FEED** (LF, перевод строчки). В некоторых редакторах можно даже включить отображение невидимых символов. Тогда текст будет выглядеть примерно так:

  <pre class='hexlet-basics-output'>
  - Привет!¶
  - О, привет!¶
  - Как дела?
  </pre>

  Устройство, которое выводит соответствующий текст, учитывает этот символ. Например, принтер при встрече с LF протаскивает бумагу вверх на одну строку, а текстовый редактор переносит весь последующий текст ниже, также на одну строку.

  Хотя таких символов не один десяток, в программировании часто встречаются всего несколько. Кроме перевода строки, к таким символам относятся табуляция (разрыв, получаемый при нажатии на кнопку Tab) и возврат каретки (только в Windows). Нам, программистам, часто нужно использовать, например, перевод строки `\n` для правильного форматирования текста.

  ```javascript
  console.log('Gregor Clegane\nDunsen\nPolliver\nChiswyck');
  ```

  На экран выведется:

  ```
  Gregor Clegane
  Dunsen
  Polliver
  Chiswyck
  ```

  Обратите внимание на следующие моменты:

  1\. Не имеет значения, что стоит перед или после `\n`: символ или пустая строка. Перевод будет обнаружен и выполнен в любом случае.

  2\. Помните, что строка может содержать один символ или вообще ноль символов. А еще строка может содержать только `\n`. Проанализилуйте следующий пример:

  ```javascript
  console.log('\n');
  console.log('Dunsen');
  ```

  Здесь мы сначала выводим строку «перевод строки», а потом делаем вывод обыкновенной строки. Программа выведет на экран:

  <pre class='hexlet-basics-output'>


  Dunsen
  </pre>

  Почему перед строкой `Dunsen` появилось две пустые строки, а не одна? Дело в том, что оператор `console.log` при выводе значения автоматически добавляет в конец символ перевода строки. Таким образом, один перевод строки мы указали явно, передав этот символ экранирующей последовательности аргументом в функцию, а второй перевод строки добавлен самой функцией автоматически.

  Ещё пример кода:

  ```javascript
  console.log('Polliver');
  console.log('Gregor Clegane');
  console.log();
  console.log('Chiswyck');
  console.log('\n');
  console.log('Dunsen');
  ```

  Вывод будет таким:

  <pre class='hexlet-basics-output'>
  Polliver
  Gregor Clegane

  Chiswyck


  Dunsen
  </pre>

  Сейчас у вас достаточно знаний, чтобы самостоятельно разобраться и понять, почему вывод сформировался именно таким образом.

  3\. Не смотря на то, что в исходном тексте программы последовательность типа `\n` выглядит как два символа, с точки зрения интерпретатора это специальный один символ.

  4\. Если нам понадобится вывести `\n` именно как текст (два отдельных печатных символа), то можно воспользоваться уже известным нам способом экранирования, добавив еще один `\` в начале. То есть последовательность `\\n` отобразится как символы `\` и `n` идущие друг за другом.

  ```javascript
  console.log('Joffrey loves using \\n');
  ```

  на экран выйдет:

  <pre class='hexlet-basics-output'>
  Joffrey loves using \n
  </pre>

  Небольшое, но важное замечание про Windows. В Windows для перевода строк по умолчанию используется `\r\n`. Такая комбинация хорошо работает только в Windows, но создаёт проблемы при переносе в другие системы (например, когда в команде разработчиков есть пользователи как Windows, так и Linux). Дело в том, что последовательность `\r\n` имеет разную трактовку в зависимости от выбранной кодировки (рассматривается позже). По этой причине в среде разработчиков принято всегда использовать `\n` без `\r`, так как LF всегда трактуется одинаково и отлично работает в любой системе. Не забудьте настроить ваш редактор на использование `\n`.

instructions: |

  Напишите программу, которая выводит на экран:

      - Did Joffrey agree?
      - He did. He also said "I love using \n".

  При этом программа использует только один `console.log`, но результат на экране должен выглядеть в точности как показано выше.

definitions:
  - name: Экранирующая последовательность
    description: |
      специальная комбинация символов в тексте. Например, _\\n_ - это перевод строки.

tips:
  - |
    Обязательно поэкспериментируйте с выводом разных строк на сайте [https://repl.it/languages/babel](https://repl.it/languages/babel)
  - |
    [История перевода строки](https://ru.wikipedia.org/wiki/Перевод_строки#История)
